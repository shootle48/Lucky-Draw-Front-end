// ‡πÄ‡∏û‡∏¥‡πà‡∏° import apiClient
import apiClient from "@/utils/apiClient"; // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)

import type { drawConditionType } from "@/types/drawCondition";

export const useDrawConditionStore = defineStore("drawCondition", {
  state: () => ({
    drawConditions: [] as drawConditionType[],
    isLoading: false,
  }),

  actions: {
    async fetchDrawConditions(
      roomId: string,
      filter_status: string[],
      filter_position: string[],
      filter_is_active: boolean
    ) {
      try {
        const payload = {
          room_id: roomId,
          filter_status: Array.isArray(filter_status) ? filter_status : [],
          filter_position: Array.isArray(filter_position)
            ? filter_position
            : [],
          filter_is_active,
        };

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô axios.post ‡πÄ‡∏õ‡πá‡∏ô apiClient.post ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ path ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        const res = await apiClient.post(
          // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          `/draw-conditions/preview`,
          payload
          // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á override header ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ payload ‡πÄ‡∏õ‡πá‡∏ô JSON (‡∏ï‡∏≤‡∏° default ‡∏Ç‡∏≠‡∏á apiClient)
        );
        // ‡πÉ‡∏ä‡πâ res.data.data ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á splice ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (res.status === 200 && res.data?.data) {
          this.drawConditions = res.data.data.map((p: any) => ({
            ...p,
            full_name: `${p.prefix ?? ""} ${p.first_name ?? ""} ${
              p.last_name ?? ""
            }`.trim(),
          }));

          console.log("üì§ ‡∏™‡πà‡∏á filter ‡πÑ‡∏õ preview API:", payload);
        } else {
          this.drawConditions = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏ñ‡πâ‡∏≤ response ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        }
      } catch (error: any) {
        console.error(
          "fetchDrawConditions error:",
          error.response?.data || error.message || error
        );
        this.drawConditions = []; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
        // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ throw error ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ component ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ fetch ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        // throw error;
      }
    },

    async createDrawCondition(payload: {
      room_id: string;
      prize_id: string;
      filter_status: string[];
      filter_position: string[];
      filter_is_active: boolean;
      quantity: number;
    }) {
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á isLoading ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô component ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å action
      try {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô axios.post ‡πÄ‡∏õ‡πá‡∏ô apiClient.post ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ path ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        const res = await apiClient.post(
          // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          `/draw-conditions/create`,
          payload
        );

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡∏Å‡πà‡∏≠‡∏ô push
        if (res.status === 200 || (res.status === 201 && res.data?.data)) {
          this.drawConditions.push(res.data.data); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ state
          // return res.data.data; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        } else {
          console.error(
            "createDrawCondition failed with status:",
            res.status,
            res.data
          );
          throw new Error(
            `Failed to create draw condition (Status: ${res.status})`
          );
        }
      } catch (error: any) {
        console.log("payload for createDrawCondition:", payload);
        console.error(
          "createDrawCondition error:",
          error.response?.data || error.message || error
        );
        alert(
          `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ${
            error.response?.data?.message || error.message || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
          }`
        );
        throw error; // ‡πÇ‡∏¢‡∏ô error ‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ component ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      } finally {
        this.isLoading = false;
      }
    },

    async deleteDrawCondition(conditionId: string) {
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á isLoading ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      try {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô axios.delete ‡πÄ‡∏õ‡πá‡∏ô apiClient.delete ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ path ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        const res = await apiClient.delete(
          // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          `/draw-conditions/${conditionId}`
        );

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status code ‡∏Å‡πà‡∏≠‡∏ô filter state (‡∏õ‡∏Å‡∏ï‡∏¥ delete ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô 200 ‡∏´‡∏£‡∏∑‡∏≠ 204)
        if (res.status === 200 || res.status === 204) {
          this.drawConditions = this.drawConditions.filter(
            (dc) => dc.id !== conditionId
          );
        } else {
          console.error(
            "‚ùå deleteDrawCondition failed with status:",
            res.status,
            res.data
          );
          throw new Error(
            `Failed to delete draw condition (Status: ${res.status})`
          );
        }
      } catch (error: any) {
        console.error(
          "‚ùå deleteDrawCondition error:",
          error.response?.data || error.message || error
        );
        alert(
          `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ${
            error.response?.data?.message || error.message || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
          }`
        );
        throw error; // ‡πÇ‡∏¢‡∏ô error ‡∏ï‡πà‡∏≠
      } finally {
        this.isLoading = false;
      }
    },
  },
});
