// composables/useDrawPage.ts
export function useDrawPage() {
  const route = useRoute();
  const drawStore = useDrawStore();
  const playerStore = usePlayerStore();
  const prizeStore = usePrizeStore();
  const drawConditionStore = useDrawConditionStore();
  const winnerStore = useWinnerStore()

  const { rooms } = storeToRefs(playerStore);
  const { prize } = storeToRefs(prizeStore);
  const { drawConditions, isLoading } = storeToRefs(drawConditionStore);

  const roomName = computed(() => rooms.value?.name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á");
  const prizeData = computed(() => prize.value);
  const filteredPlayers = computed(() => drawConditions.value || []);
  const drawConditionID = route.params.id as string;
  const drawCondition = computed(() => drawStore.drawConditions);
  const drawQuantity = computed(() => drawCondition.value?.quantity || 1);

  const isDrawing = ref(false);
  const showWinnerModal = ref(false);
  const drawnWinners = ref<any[]>([]);
  const currentIndex = ref(0);
  const glowingTempIndex = ref<number | null>(null);
  const glowingIndexes = ref<number[]>([]);
  const remainingPlayers = ref<any[]>([]);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  const drawnPlayerIds = ref<Set<number | string>>(new Set());

  const currentWinner = computed(
    () => drawnWinners.value[currentIndex.value] || null
  );

  const statusMap: Record<string, { label: string; color: string }> = {
    not_received: { label: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", color: "badge-warning" },
    received: { label: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß", color: "badge-success" },
    waive: { label: "‡∏™‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", color: "badge-error" },
    no_show: { label: "‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏ô", color: "badge-neutral" },
  };

  const filterPositions = computed(
    () => drawCondition.value?.filter_position || []
  );
  const filterStatuses = computed(
    () => drawCondition.value?.filter_status || []
  );
  const isActiveLabel = computed(() =>
    drawCondition.value?.filter_is_active
      ? "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°"
      : "‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
  );

  const startDrawing = async () => {
    if (filteredPlayers.value.length === 0 || isDrawing.value) return;
    if (drawQuantity.value > filteredPlayers.value.length) {
      alert("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•");
      return;
    }

    isDrawing.value = true;
    drawnWinners.value = [];
    glowingIndexes.value = [];
    currentIndex.value = 0;
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï drawnPlayerIds ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    drawnPlayerIds.value.clear();

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ
    remainingPlayers.value = [...filteredPlayers.value];

    await drawNextRound();
  };

  const drawNextRound = async () => {
    let speed = 60;
    let count = 0;
    const maxCount = 20;

    const loop = () => {
      glowingTempIndex.value = Math.floor(
        Math.random() * remainingPlayers.value.length
      );
      count++;

      if (count < maxCount) {
        speed += 30;
        setTimeout(loop, speed);
      } else {
        const finalIndex = Math.floor(
          Math.random() * remainingPlayers.value.length
        );
        const selected = remainingPlayers.value.splice(finalIndex, 1)[0];

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÄ‡∏ã‡πá‡∏ï
        drawnPlayerIds.value.add(selected.id);

        drawnWinners.value.push(selected);
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó currentIndex ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        currentIndex.value = drawnWinners.value.length - 1;

        glowingIndexes.value.push(selected.id);
        glowingTempIndex.value = null;

        console.log(
          `üéØ ‡∏ú‡∏π‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${drawnWinners.value.length}: ${selected.first_name} ${selected.last_name}`
        );

        setTimeout(() => {
          showWinnerModal.value = true;
          isDrawing.value = false;
        }, 500);
      }
    };

    loop();
  };

  const submitWinner = async (status: "not_received" | "waive" | "no_show") => {
    const winner = currentWinner.value;
    if (!winner) return;

    const payload = {
      room_id: drawCondition.value?.room_id,
      player_id: winner.id,
      prize_id: drawCondition.value?.prize_id,
      draw_condition_id: drawConditionID,
      player_status: status,
    };

    await winnerStore.createWinner(payload)
    console.log("üì¶ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ:", payload);
    showWinnerModal.value = false;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (drawnWinners.value.length < drawQuantity.value) {
      // ‡∏¢‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô - ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      remainingPlayers.value = filteredPlayers.value.filter(
        (player) => !drawnPlayerIds.value.has(player.id)
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (remainingPlayers.value.length === 0) {
        alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß");
        return;
      }

      isDrawing.value = true;
      setTimeout(() => drawNextRound(), 500);
    } else {
      // ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏£‡∏ö
      alert("üéâ ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!");
    }
  };

  onMounted(async () => {
    await drawStore.fetchDrawData(drawConditionID);
    const {
      room_id,
      prize_id,
      filter_status,
      filter_position,
      filter_is_active,
    } = drawStore.drawConditions;

    if (room_id) await playerStore.fetchRoom(room_id);
    if (prize_id) await prizeStore.getPrize(prize_id);

    if (filter_status?.length && filter_position?.length) {
      await drawConditionStore.fetchDrawConditions(
        room_id,
        filter_status,
        filter_position,
        filter_is_active
      );
      console.log(drawConditionStore.drawConditions)
    } else {
      drawConditionStore.drawConditions = [];
    }
  });

  return {
    roomName,
    prizeData,
    filteredPlayers,
    drawQuantity,
    isDrawing,
    showWinnerModal,
    currentWinner,
    currentIndex,
    startDrawing,
    submitWinner,
    filterPositions,
    filterStatuses,
    isActiveLabel,
    statusMap,
    glowingIndexes,
    glowingTempIndex,
    isLoading
  };
}
